Описание:
    Данное приложение представляет из себя захватчик под Unix (хотя работоспособность пока проверялась только под Ubuntu, что является Linux-ом (но как таковой разницы между Unix и Linux, как я понял, нет))
    Для того, чтобы он работал, необходимо:
        0) установить scrot для возможности снятия скриншотов (команда в терминале: sudo apt-get install scrot или примерно так, погуглите);
        1) запустить приложение с правами суперпользователя;
        2) указать имена (полный путь) специальных файлов устройств (клавиатуры и мыши);
        3) указать Ip и номер порта для подключения к редактору (почему-то работает только в локальной сети, возможно, нужно использовать IpV6);
        4) в папке с программой должен быть файл KeyCodes.txt (структуру смотри ниже).

    Файлы устройств хранятся примерно в /dev/input
    Для определения, какие из них для какого устройства, нужно их открыть, к примеру, через терминал вызвав sudo cat "имя_файла", и проделать какие-нибудь действия (клики, движение мыши, нажатие клавишь клавиатуры и т.п.).
    Если в терминале появляются непонятные иероглифы - поздравляю, вы нашли один из нужных файлов.

    Гаранитий, что всё будет работать как надо - нет, т.к., возможно, на выходе файлов устройств будет информация не в ожидаемом виде (см. ниже про описание файлов устройств).

    В основе работы захватчика лежит механизм сигналов и слотов. Т.е. все объекты классов в основном общаются через сообщения, а не через вызов методов классов.
    Всего есть 4 основных потока:
        1) Оконное приложение, "диспетчер" (THook);
        2) Клиент (TClient);
        3) Захватчики (THookMouse, THookKeyboard);
        4) Упаковщик в xml (TEventsConvertor).

    Общение объектов этих классов осуществляется через сигналы и слоты. Один объект отправляет сообщение (сигнал), другой принимает его и вызывает соответствующую функцию (слот).
    !!! Слот (если его выполнение вызвано возникшим сигналом, а не вызовом как метода) выполняется в том потоке, в котором живёт соответствующий объект !!!
    Для связывания сигналов и слотов - connect.

    THook - что-то вроде диспетчера, через него происходит весь обмен сообщениями
    TClient - tcp клиент, осуществляет соединение и отправку данных редактору
    THookMouse, THookKeyboard - захватчики соответсвующих устройств, унаследованы от астрактного класса THookDevice
    TEventsConvertor - просто принимает событие (TEvent) и упаковывает его в XML. Т.е. у него образуется очередь вызовов сигналов и он по порядку обрабатывает каждое поступившее событие.
    TEvent - абстрактный класс, описывающий общую структуру события, от него унаследованы классы для событий клавиатуры и мыши.

    Все общение происходит через диспетчер (THook).
    К примеру, оконное приложение говорит диспетчеру о необходимости подключения или начале/окончании работы захватчика. Диспетчер переправляет запрос соответсвующему объекту (TClient или захватчикам)
    Для более точного представления передачи сообщений, смотри картинку про обмен данными в главе 2 диплома, либо разберись во всех connect.

    При запуске захватчиков, они пытаются открыть файлы устройств. Если это удалось, то они запускают в отдельных потоках процессы перехвата событий (т.е. появляется ещё 2 потока).
    Скриншот снимается вызовом утилиты scrot, которая сохраняет скриншот в папке с проектом /images. Далее этот скриншот, когда шаг отправляется в редактор, загружается в оперативную память, а файл удаляется.

Общий принцип работы:
    ---------Подключение-------------------
    1) Оконное приложение (после нажатия на кнопку connect) создаёт сигнал с параметрами для подключения к редактору
    2) Диспетчер реагирует на сигнал и создаёт свой такой же
    3) Клиент реагирует на сигнал диспетчера и осуществляет подключение, если всё хорошо, создаёт сигнал об успехе
    4) Диспетчер принимает сигнал об успехе клиента и создаёт соответствующий
    5) Оконное приложение принимает сигнал об успехе от диспетчера и создаёт 2 сигнала с именами файлов
    6) Диспетчер принимает сигналы с именами файлов и создаёт такие же, которые принимают захватчики (THookMouse THookKeyboard)
    7) Каждый захватчик принимает соответствующий ему сигнал от диспетчера и запоминает имя файла

    ---------Начало перехвата-------------
    8) При нажатии кнопки Run, оконное приложение создаёт сигнал, который принимает диспетчер
    9) В ответ диспетчер создаёт свой такой же сигнал для захватчиков
    10) Каждый захватчик принимает сигнал от дисптчера и пытается открыть файл и начать перехват, если всё хорошо, то создаёт сигнал об успехе и запускает в новом потоке процесс перехвата
    11) Диспетчер принимает сигналы об успехах, если оба захватчика были успешно запущены, то создаёт свой сигнал об успехе, который принимает оконное приложение

    ---------Перехват---------------------
    При возникновении прерывания, в файле появляется соответсвующая ему информация, которую считывает захватчик
    12) Захватчик считал байты из файла
    13) Обработал байты и, если надо, записал в объект event нужную информацию
    14) Если полученные байты означают полноценное событие, то создаётся сигнал, который передаёт указатель на область, на которую указывает event. Указателю event присваиваится 0.
    15) Диспетчер реагирует на сигнал захватчика и создаёт свой такой же, на который реагирует конвертор
    16) Конвертор реагирует на сигнал диспетчера и конвертрирует событие в xml, после чего создаёт сигнал с передачей указателя на область памяти, в которой лежит сообщение
    17) Диспетчер реагирует на сигнал конвертора и создаёт свой такой же, на который реагирует клиент
    18) Клиент принял сигнал и отправил редактору событие

    Думаю, этого достаточно, чтоб примерно понять, как это работает. Конечно, всё немного (а может даже и не немного) сложнее, т.к. есть сообщения ошибок, диспетчер (в каких-то случаях) проверяет, нужно ли создавать сигнал и т.д.

Описание файлов устройств:
    Файл mice (мышь):
        Описание:
            Содержит в себе информацию о событиях мыши. Каждое событие кодируется 3-мя байтами x0 x1 x2;
            Файл mice находится в /dev/input/
            x0 - "индентификатор" события
            x1 - смещение по оси x
            x2 - смещение по оси y
            x1 и x2 показывают не совсем смещение, скорее скорость смещения мыши (более подробно не разбирался, т.к. не понадобилось)

        Сигналы Мыши:
            Правый клик: 10 0 0
            Левый клик: 9 0 0
            Нажатие колёсика: 12 0 0

            8 0 0 - отпустить кнопку

            Движение мыши вверх: 8 0 +?
                          вниз: 40 0 -?
                          вправо: 8 +? 0
                          влево: 24 -? 0

                          вправо и вверх: 8 +? +?
                          вправо и вниз: 40 +? -?
                          влево и вниз: 56 -? -?
                          влево и вверх: 24 -? +?

            Движение с зажатой ЛКМ:
                При движении вверх: 9 0 +?
                             вниз: 41 0 -?
                             вправо: 9 +? 0
                             влево: 25 -? 0

                             вправо и вверх: 9 +? +?
                             вправо и вниз: 41 +? -?
                             влево и вниз: 57 -? -?
                             влево и вверх: 25 -? +?

            !!! События прокрутки колёсика мыши вверх и вниз инициализируются, как событие отпускания кнопки (8 0 0). Из-за этого использование данного файла не даёт возможность получения всех триггеров

    Файл inpute4 (клавиатура):
        Описание:
            Содердит в себе информацию о событиях клавиатуры (скан-коды). Тип раскладки клавиатуры не воспринимается. Кнопка Fn не воспринимается.
            Каждой клавише клавиатуры назначен свой код:
                Esc = 1
                1..Backspace = 2..14
                Tab..] = 15..27
                Enter = 28
                LCtrl = 29
                a..' = 30..40
                ` = 41
                Lshift = 42
                \ = 43 (над Enter)
                z..RShift = ..44..54
                * (NumPad) = 55
                LAlt = 56
                Space = 57
                CapsLock = 58
                F1..F10 = 59..68
                NumLock = 69
                7..9 (NumPad) == 71..73
                - (NumPad) = 74
                4..6 (NumPad) = 75..77
                + (NumPad) = 78
                1..3 (NumPad) = 79..81
                0 (NumPad) = 82
                . (NumPad) = 83

                F11 = 87
                F12 = 88

                Enter (NumPad) = 96
                RCtrl = 97
                / (NumPad) = 98
                PrtSc = 99
                RAlt = 100

                Home = 102
                Up = 103
                PgUp = 104
                Left = 105
                Right = 106
                End = 107
                Down = 108
                PgDn = 109
                Ins = 110
                Del 111

                Pause = 119

                Pusk = 125

                ? = 127

            Нажатие клавиши кодируется несколькими "сообщениями". Каждое сообщение = 24 байтам:
                0..7 - ?, возможно как-то связано со временем
                8..15 - ?, возможно это "индентификатор сообщения" (у группы сообщений, привязанной к одному событию, значения одинаковы)
                16..23 - "информация сообщения"
            "Информация сообщения" может быть разной, но о нажатой клавиши говорит сообщение: 1 0 X2 0 X4 0 0 0
            X2: Код клавиши
            X4: 0 - Клавишу отпустили
                1 - Клавишу нажали
                2 - Клавиша зажата

Структрура XML сообщений:
    <!--При подключении, редактор и захватчик обмениваются сообщениями:-->
    <!-- 1) Захватчик просит подключения -->
    <!-- 2) На этот запрос редактор отправляет такое сообщение:-->
    <connection type="Fineltec.Tutor.Capture" />
    <!-- 3) Захватчик, в ответ на сообщение редактора, отправляет такое же:-->
    <connection type="Fineltec.Tutor.Capture" />
    <!-- 4) Соединение установлено-->

    <!--При отключении, редактор присылает сообщение:-->
    <close/>

    <!--Начало работы захватчика-->
    <message number="1">
            <content.start />
    </message>
    <!--Конец работы захватчика-->
    <message number="1">
            <content.stop />
    </message>

    <!--Правая кнопка мыши, по такому же принципу и левая. count - кол-во кликов. mod - модификаторы (если есть), если их нет, то этот тег отсутсвует-->
    <message number="4">
            <content.snapshot type="mouseClick" time="1265919578">
                    <picture size="2297296">ЗДЕСЬ_КАРТИНКА</picture>
                    <mod>Control, Shift, Alt</mod>
                    <event button="Right" count="1">
                            <point x="1180" y="660" />
                            <window x="0" y="0" width="1920" height="1080" />
                    </event>
            </content.snapshot>
    </message>
    <!--Левая, без модификатора, window - область клика-->
    <message number="4">
            <content.snapshot type="mouseClick" time="1265919578">
                    <picture size="2297296">ЗДЕСЬ_КАРТИНКА</picture>
                    <event button="Left" count="2">
                            <point x="1180" y="660" />
                            <window x="0" y="0" width="1920" height="1080" />
                    </event>
            </content.snapshot>
    </message>

    <!--Клавиши клавиатуры, пример без модификатора (с модификатором добавляетс соответсвующий тег)-->
    <message number="3">
            <content.snapshot type="keyPress" time="1266411187">
                    <picture size="1079746"></picture>
                    <event key="D" />
            </content.snapshot>
    </message>

    <!--Перетаскивание-->
    <message number="104">
            <content.snapshot type="mouseDragStart" time="1270562421">
                    <picture size="506573"></picture>
                    <event button="Left">
                            <point x="838" y="524" />
                    </event>
            </content.snapshot>
    </message>
    <message number="105">
            <content.snapshot type="mouseDragTrack" time="1270563421">
                    <picture size="329442"></picture>
                    <point x="862" y="507" />
            </content.snapshot>
    </message>
    <message number="106">
            <content.snapshot type="mouseDragTrack" time="1270563968">
                    <picture size="329442"></picture>
                    <point x="886" y="488" />
            </content.snapshot>
    </message>
    <message number="107">
            <content.snapshot type="mouseDragTrack" time="1270564296">
                    <picture size="329442"></picture>
                    <point x="910" y="470" />
            </content.snapshot>
    </message>
    <message number="108">
            <content.snapshot type="mouseDragStop" time="1270564906">
                    <picture size="329442"></picture>
                    <point x="934" y="456" />
            </content.snapshot>
    </message>

Символ определяется по коду. Считывается из файла KeyCodes.txt строка с номером кода. Эта строка и есть нажатая клавиша.
Структура файла KeyCodes.txt (строки от 0, до 127):
    Escape
    D1
    D2
    D3
    D4
    D5
    D6
    D7
    D8
    D9
    D0
    OemMinus
    OemPlus
    Back
    Tab
    Q
    W
    E
    R
    T
    Y
    U
    I
    O
    P
    OemOpenBrackets
    Oem6
    Return
    LeftCtrl
    A
    S
    D
    F
    G
    H
    J
    K
    L
    Oem1
    OemQuotes
    Oem3
    LeftShift
    Oem5
    Z
    X
    C
    V
    B
    N
    M
    OemComma
    OemPeriod
    OemQuestion
    RightShift
    Multiply
    LeftAlt
    Space
    Capital
    F1
    F2
    F3
    F4
    F5
    F6
    F7
    F8
    F9
    F10
    NumLock

    NumPad7
    NumPad8
    NumPad9
    Subtract
    NumPad4
    NumPad5
    NumPad6
    Add
    NumPad1
    NumPad2
    NumPad3
    NumPad0
    Decimal



    F11
    F12







    Return
    RightCtrl
    Divide
    Snapshot
    RightAlt

    Home
    Up
    PageUp
    Left
    Right
    End
    Down
    Next
    Insert
    Delete







    Pause





    LWin

    Apps

Личная оценка - захватчик написан криво, но большего, думаю, от студента ожидать было бы глупо.
Идеи и предложения:
    1) Отловить событие "Ожидание" можно путём периодичного снятия скриншота и проверки с предыдущим, если есть существенные изменения и не было за это время событий => событие Ожидание;
        Уже пробовал примерно реализовать: сравнение картинок достаточно быстрое (монитор 15", 720),
        2 снимка экрана в любом случае будут иметь различия (даже если для человека они не видны)
        (различие примерно в 100 пикселях - для человека не заметны,
        а, к примеру, 2 почти одинаковые картинки, но на одной есть курсор, а на другой нет - различие уже почти в 1000 пикселях).
    2) По хорошему бы, переписать весь тьютор, который написан под Windows. Как вариант: ядро - веб версия, включающая редактор, плеер, администратор, а локальная версия лишь обёртка вокруг веб (что-то вроде своего браузера). Все модули, кроме захватчика, на первый взгляд кроссплатформенные.
    3) Надо бы избавляться от работы с изображением как с картинкой, и переделывать под что-то вроде gif, это позволит в перспективе к шагу прикреплять анимацию (мигание курсора при вводе текста, подсветка клавишь при наведении мыши в соответсвующую область и т.д.), а значит процесс обучения будет более приближен к обучению на реальном ИУС
